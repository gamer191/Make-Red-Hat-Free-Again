{"version":3,"file":"mysqlPlugin.fcde7a64678f74e07a21.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlResponseParser.ts","webpack://grafana/./public/app/plugins/datasource/mysql/fields.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mySqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlDatasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, SecretTextArea } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { labelWidth, editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <InlineField\n          tooltip={\n            <span>To authenticate with an TLS/SSL client certificate, provide the client certificate here.</span>\n          }\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showCACert ? (\n        <InlineField\n          tooltip={<span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Root Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showKeyPair ? (\n        <InlineField\n          tooltip={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Key\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n    </>\n  );\n};\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { MySQLQuery } from './types';\n\nexport default class MySQLQueryModel {\n  target: Partial<MySQLQuery>;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target: Partial<MySQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  getDatabase() {\n    return this.target.dataset;\n  }\n}\n","import { uniqBy } from 'lodash';\n\nimport { DataFrame, MetricFindValue } from '@grafana/data';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(frame: DataFrame): MetricFindValue[] {\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return uniqBy(values, 'text');\n  }\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from 'app/features/plugins/sql/types';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import MySQLQueryModel from './MySqlQueryModel';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? `'${dataset}'` : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(queryModel: MySQLQueryModel, table: string, type?: string, timeColumn?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(queryModel, table);\n\n  switch (type) {\n    case 'time': {\n      query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n      break;\n    }\n    case 'metric': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n    case 'value': {\n      query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n      query += ' AND column_name <> ' + quoteIdentAsLiteral(queryModel, timeColumn!);\n      break;\n    }\n    case 'group': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n  }\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(queryModel: MySQLQueryModel, table: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(queryModel, parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(queryModel, parts[1]);\n    return query;\n  } else {\n    const database = queryModel.getDatabase() !== undefined ? `'${queryModel.getDatabase()}'` : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(queryModel, table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(queryModel: MySQLQueryModel, value: string) {\n  return queryModel.quoteLiteral(queryModel.unquoteIdentifier(value));\n}\n","import {\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  TableDefinition,\n  TableIdentifier,\n} from '@grafana/experimental';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: React.MutableRefObject<(t?: TableIdentifier) => Promise<TableDefinition[]>>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    tables: {\n      resolve: getMeta.current,\n    },\n    columns: {\n      resolve: getMeta.current,\n    },\n  });\n","import { DataSourceInstanceSettings, ScopedVars, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/experimental';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport { DB, ResponseParser, SQLQuery } from 'app/features/plugins/sql/types';\nimport { formatSQL } from 'app/features/plugins/sql/utils/formatSQL';\n\nimport MySQLQueryModel from './MySqlQueryModel';\nimport MySqlResponseParser from './MySqlResponseParser';\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery, showDatabases } from './mySqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { MySQLOptions } from './types';\n\nexport class MySqlDatasource extends SqlDatasource {\n  responseParser: MySqlResponseParser;\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<MySQLOptions>) {\n    super(instanceSettings);\n    this.responseParser = new MySqlResponseParser();\n  }\n\n  getQueryModel(target?: Partial<SQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MySQLQueryModel {\n    return new MySQLQueryModel(target!, templateSrv, scopedVars);\n  }\n\n  getResponseParser(): ResponseParser {\n    return this.responseParser;\n  }\n\n  getSqlLanguageDefinition(db: DB): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: { current: (identifier?: TableIdentifier) => this.fetchMeta(identifier) },\n    };\n    this.sqlLanguageDefinition = {\n      id: 'sql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<string[]>(showDatabases(), { refId: 'datasets' });\n    return datasets.map((t) => t[0]);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const tables = await this.runSql<string[]>(buildTableQuery(dataset), { refId: 'tables' });\n    return tables.map((t) => t[0]);\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const queryString = buildColumnQuery(this.getQueryModel(query), query.table!);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({ name: f[0], text: f[0], value: f[0], type: f[1], label: f[0] }));\n    return mapFieldsToTypes(fields);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && !defaultDB) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.value, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      functions: () => ['VARIANCE', 'STDDEV'],\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(this.db),\n    };\n  }\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, FieldSet, InlineField, InlineFieldRow, InlineSwitch, Input, Link, SecretInput } from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\n\nimport { MySQLOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MySQLOptions>) => {\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSwitchChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      updateDatasourcePluginJsonDataOption(props, property, event.currentTarget.checked);\n    };\n  };\n\n  const mediumWidth = 20;\n  const shortWidth = 15;\n  const longWidth = 40;\n\n  return (\n    <>\n      <FieldSet label=\"MySQL Connection\" width={400}>\n        <InlineField labelWidth={shortWidth} label=\"Host\">\n          <Input\n            width={longWidth}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:3306\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={shortWidth} label=\"Database\">\n          <Input\n            width={longWidth}\n            name=\"database\"\n            value={options.database || ''}\n            placeholder=\"database name\"\n            onChange={onDSOptionChanged('database')}\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={shortWidth} label=\"User\">\n            <Input\n              width={shortWidth}\n              value={options.user || ''}\n              placeholder=\"user\"\n              onChange={onDSOptionChanged('user')}\n            ></Input>\n          </InlineField>\n          <InlineField labelWidth={shortWidth - 5} label=\"Password\">\n            <SecretInput\n              width={shortWidth}\n              placeholder=\"Password\"\n              isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n              onReset={onResetPassword}\n              onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField\n          tooltip={\n            <span>\n              Specify the time zone used in the database session, e.g. <code>Europe/Berlin</code> or\n              <code>+02:00</code>. This is necessary, if the timezone of the database (or the host of the database) is\n              set to something other than UTC. The value is set in the session with\n              <code>SET time_zone=&apos;...&apos;</code>. If you leave this field empty, the timezone is not updated.\n              You can find more information in the MySQL documentation.\n            </span>\n          }\n          label=\"Session timezone\"\n          labelWidth={mediumWidth}\n        >\n          <Input\n            width={longWidth - 5}\n            value={jsonData.timezone || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timezone')}\n            placeholder=\"(default)\"\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={mediumWidth} htmlFor=\"tlsAuth\" label=\"TLS Client Auth\">\n            <InlineSwitch\n              id=\"tlsAuth\"\n              onChange={onSwitchChanged('tlsAuth')}\n              value={jsonData.tlsAuth || false}\n            ></InlineSwitch>\n          </InlineField>\n          <InlineField\n            labelWidth={mediumWidth}\n            tooltip=\"Needed for verifing self-signed TLS Certs\"\n            htmlFor=\"tlsCaCert\"\n            label=\"With CA Cert\"\n          >\n            <InlineSwitch\n              id=\"tlsCaCert\"\n              onChange={onSwitchChanged('tlsAuthWithCACert')}\n              value={jsonData.tlsAuthWithCACert || false}\n            ></InlineSwitch>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField labelWidth={mediumWidth} htmlFor=\"skipTLSVerify\" label=\"Skip TLS Verify\">\n          <InlineSwitch\n            id=\"skipTLSVerify\"\n            onChange={onSwitchChanged('tlsSkipVerify')}\n            value={jsonData.tlsSkipVerify || false}\n          ></InlineSwitch>\n        </InlineField>\n      </FieldSet>\n\n      {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n        <FieldSet label=\"TLS/SSL Auth Details\">\n          <TLSSecretsConfig\n            showCACert={jsonData.tlsAuthWithCACert}\n            showKeyPair={jsonData.tlsAuth}\n            editorProps={props}\n            labelWidth={25}\n          ></TLSSecretsConfig>\n        </FieldSet>\n      ) : null}\n\n      <ConnectionLimits\n        labelWidth={shortWidth}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"MySQL details\">\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          labelWidth={mediumWidth}\n          label=\"Min time interval\"\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <strong>Highly</strong> recommend you create a specific MySQL user with restricted permissions.\n        Checkout the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mysql/\">\n          MySQL Data Source Docs\n        </Link>\n        for more information.\n      </Alert>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { MySqlDatasource } from './MySqlDatasource';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MySQLOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MySqlDatasource, SQLQuery, MySQLOptions>(MySqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["TLSSecretsConfig","props","labelWidth","editorProps","showCACert","showKeyPair","secureJsonFields","options","tooltip","label","placeholder","cols","rows","isConfigured","tlsClientCert","onChange","onUpdateDatasourceSecureJsonDataOption","onReset","updateDatasourcePluginResetOption","tlsCACert","tlsClientKey","MySQLQueryModel","constructor","target","templateSrv","scopedVars","this","unquoteIdentifier","value","length","substring","replace","quoteIdentifier","quoteLiteral","getDatabase","dataset","ResponseParser","transformMetricFindResponse","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","flatMap","toArray","map","v","uniqBy","mapColumnTypeToIcon","type","buildColumnQuery","queryModel","table","timeColumn","query","includes","parts","split","quoteIdentAsLiteral","undefined","buildTableConstraint","getSqlCompletionProvider","getMeta","monaco","language","getStandardSQLCompletionProvider","tables","resolve","current","columns","MySqlDatasource","SqlDatasource","instanceSettings","super","responseParser","MySqlResponseParser","getQueryModel","getResponseParser","getSqlLanguageDefinition","db","sqlLanguageDefinition","args","identifier","fetchMeta","id","completionProvider","formatter","formatSQL","runSql","refId","t","buildTableQuery","queryString","col","toUpperCase","raqbFieldType","icon","mapFieldsToTypes","defaultDB","jsonData","database","schema","fetchFields","completion","kind","CompletionItemKind","fetchTables","fetchDatasets","d","getDB","datasets","validateQuery","range","Promise","error","isError","isValid","dsID","functions","getEditorLanguageDefinition","plugin","DataSourcePlugin","setQueryEditor","SqlQueryEditor","setConfigEditor","onOptionsChange","onDSOptionChanged","property","event","currentTarget","onSwitchChanged","updateDatasourcePluginJsonDataOption","checked","shortWidth","FieldSet","width","InlineField","Input","I","url","InlineFieldRow","user","SecretInput","password","onBlur","longWidth","timezone","onUpdateDatasourceJsonDataOption","htmlFor","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","ConnectionLimits","onPropertyChanged","timeInterval","Alert","title","severity","Link","rel","href"],"sourceRoot":""}